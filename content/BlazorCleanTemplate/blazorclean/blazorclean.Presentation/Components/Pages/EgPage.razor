@page "/eg-page"

@using blazorclean.Application.DTOs.Common
@using blazorclean.Application.DTOs.Query
@using blazorclean.Application.DTOs.Responses
@using blazorclean.Application.DTOs.Requests
@using blazorclean.Domain.Entities
@using blazorclean.Presentation.Components.Buttons
@using blazorclean.Application.Interfaces.Services
@using blazorclean.Presentation.Components.Dialogs

@inject IEgService _egService

@rendermode InteractiveServer

<PageTitle>Example Page</PageTitle>

<h3>Eg Entities</h3>

<EgCreateButton OnCreated="ReloadList" />

<input type="text" @bind="request.Query" placeholder="Search..." class="form-control my-2" @oninput="SearchChanged" />

@if (egs.Count > 0)
{
    <table class="table table-striped table-bordered mt-3">
        <thead class="table-light">
            <tr>
                <th>No.</th>
                <th>Message</th>
                <th style="width:180px;">Actions</th>
                <!-- Add more columns if EgResponse has more fields -->
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < egs.Count; i++)
            {
                <tr>
                    <td>@((request.PageIndex - 1) * request.PageSize + i + 1)</td>
                    <td>@egs[i].Message</td>
                    <td>
                        <div class="d-flex gap-2">
                            <EgUpdateButton EntityToEdit="@(new EgUpdateRequest { Name = egs[i].Name ?? "Not have name" })" EntityId="@egs[i].Id"
                                OnUpdated="ReloadList" />
                            <EgDeleteButton EntityId="@egs[i].Id" Name="@egs[i].Name" OnDeleted="ReloadList" />
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex align-items-center justify-content-between mt-3">
        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(response.PageIndex == 1)">Previous</button>
            <span>Page @response.PageIndex of @response.TotalPages</span>
            <button class="btn btn-secondary" @onclick="NextPage"
                disabled="@(response.PageIndex == response.TotalPages)">Next</button>
        </div>

        <div class="d-flex align-items-center gap-2">
            <label for="pageSize">Page Size:</label>
            <select id="pageSize" class="form-select w-auto" @onchange="PageSizeChanged" value="@request.PageSize">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
            </select>
        </div>
    </div>
}
else
{
    <p>No items found.</p>
}


@code {
    private List<EgDetailsResponse> egs = new();
    private EgPaginationRequest request = new() { PageIndex = 1, PageSize = 10 };

    private PaginationResponse<EgDetailsResponse> response = new()
    {
        Items = new List<EgDetailsResponse>(),
        PageIndex = 1,
        PageSize = 1,
        TotalItem = 0
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var result = await _egService.GetPagination(request);

        if (result == null || result.Data == null)
        {
            egs = new List<EgDetailsResponse>();
            response = new PaginationResponse<EgDetailsResponse>
            {
                Items = new List<EgDetailsResponse>(),
                PageIndex = 1,
                PageSize = 1,
                TotalItem = 0
            };
            return;
        }

        response = result.Data;

        egs = response.Items.ToList();
    }

    private async Task PrevPage()
    {
        if (request.PageIndex > 1)
        {
            request.PageIndex--;
            await LoadData();
        }
    }

    private async Task SearchChanged(ChangeEventArgs e)
    {
        request.Query = e.Value?.ToString();
        request.PageIndex = 1;
        await LoadData();
    }

    private async Task NextPage()
    {
        if (request.PageIndex < response.TotalPages)
        {
            request.PageIndex++;
            await LoadData();
        }
    }

    private async Task ReloadList()
    {
        request.PageIndex = 1;
        await LoadData();
    }

    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        request.PageSize = int.Parse(e.Value?.ToString() ?? "10");
        request.PageIndex = 1;
        await LoadData();
    }
}