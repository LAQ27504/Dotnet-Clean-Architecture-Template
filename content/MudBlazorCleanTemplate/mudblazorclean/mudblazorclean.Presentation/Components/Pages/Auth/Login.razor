@page "/auth/login"
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using mudblazorclean.Application.DTOs.Requests.Auth
@using mudblazorclean.Application.Interfaces.Services.Authentication
@using mudblazorclean.Presentation.Components.Layout.Auth

@layout AuthLayout
@attribute [ExcludeFromInteractiveRouting]

@inject NavigationManager _navManager
@inject IAuthService _authenservice

<EditForm Model="@request" OnValidSubmit="Authenticate" FormName="login" method="post">
    <MudGrid Justify="Justify.Center" Class="mt-12">
        <MudItem xs="12" sm="8" md="4">
            <MudGrid Spacing="3">
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudText Typo="Typo.h4">Login</MudText>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error" Class="mb-3">@errorMessage</MudAlert>
                    }
                </MudItem>
                <MudItem xs="12">
                    <MudStaticTextField @bind-value="@request.Username" Label="User Name" Variant="Variant.Outlined"
                        Placeholder="user" />
                </MudItem>
                <MudItem xs="12">
                    <MudStaticTextField @bind-value="@request.Password" Label="Password" Variant="Variant.Outlined"
                        Placeholder="password123" InputType="InputType.Password" />
                </MudItem>
                <MudItem xs="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FormAction="FormAction.Submit"
                        FullWidth="true">
                        Login</MudStaticButton>
                </MudItem>
                <MudItem xs="12">
                    <MudLink Href="/auth/registration">Don't have account ? Create one</MudLink>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [CascadingParameter]
    public required HttpContext httpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "login")]
    public LoginRequest request { get; set; } = new()
    {
        Username = string.Empty,
        Password = string.Empty
    };

    public string? errorMessage;

    protected override Task OnInitializedAsync()
    {
        errorMessage = string.Empty;
        return Task.CompletedTask;
    }

    private async Task Authenticate()
    {
        var response = _authenservice.Login(request);

        if (!response.Success)
        {
            errorMessage = response.Message;
            return;
        }
        var claims = response.Data;
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);

        _navManager.NavigateTo("/", forceLoad: true);
    }

}