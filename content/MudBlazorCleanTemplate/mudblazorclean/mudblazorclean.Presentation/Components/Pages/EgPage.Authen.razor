@page "/eg-page"
@using Microsoft.AspNetCore.Authorization
@using mudblazorclean.Application.DTOs.Common
@using mudblazorclean.Application.DTOs.Query
@using mudblazorclean.Application.DTOs.Requests
@using mudblazorclean.Application.DTOs.Responses
@using mudblazorclean.Presentation.Components.Buttons
@using mudblazorclean.Application.Interfaces.Services

@inject IEgService _egService
@attribute [Authorize]

<PageTitle>Example</PageTitle>

<MudText Typo="Typo.h3" Style="padding: 16px 16px 0px 16px;">Eg Entities</MudText>

<MudStack Row="true" Spacing="10" Class="mb-2" Style="padding: 16px 16px 0px 16px;">
    <MudTextField @bind-Value="request.Query" Placeholder="Search..." Adornment="Adornment.Start"
        AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" TextChanged="LoadData"
        Variant="Variant.Outlined" />
    <EgCreateButton OnCreated="ReloadList" />
</MudStack>

@if (egs.Count > 0)
{
    <MudTable Items="@egs" Loading="@_loading" Hover="true" Breakpoint="Breakpoint.Sm" Style="padding: 16px 16px 0px 16px;">
        <HeaderContent>
            <MudTh>No.</MudTh>
            <MudTh>Message</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@(egs.IndexOf(context) + 1)</MudTd>
            <MudTd>@context.Message</MudTd>
            <MudTd>
                <EgUpdateButton EntityId="@context.Id"
                    EntityToEdit="@(new EgUpdateRequest { Name = context.Name ?? "Not have name" })"
                    OnUpdated="ReloadList" />
                <EgDeleteButton Name="@context.Name" EntityId="@context.Id" OnDeleted="ReloadList" />
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudStack Row="true" Justify="@Justify.FlexEnd" Spacing="2" Style="padding: 16px 16px 0px 16px;">
        <MudSelect T="int" @bind-Value="request.PageSize" SelectedValuesChanged="PageSizeChanged" FitContent="true"
            Dense="true" Class="ma-4" Immediate="true" Style="min-width: 80px;">
            <MudSelectItem Value="5">5</MudSelectItem>
            <MudSelectItem Value="10">10</MudSelectItem>
            <MudSelectItem Value="20">20</MudSelectItem>
        </MudSelect>
        <MudPagination SelectedChanged="PageChanged" ShowFirstButton="true" ShowLastButton="true"
            Count="@response.TotalPages" Class="pa-4" />
    </MudStack>
}
else
{
    <MudText Style="padding: 16px 16px 16px 16px;">No items found.</MudText>
}


@code {
    private bool _loading = false;
    private List<EgDetailsResponse> egs = new();
    private EgPaginationRequest request = new() { PageIndex = 1, PageSize = 10 };

    private PaginationResponse<EgDetailsResponse> response = new()
    {
        Items = new List<EgDetailsResponse>(),
        PageIndex = 1,
        PageSize = 1,
        TotalItem = 0
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        var result = await _egService.GetPagination(request);
        if (result == null || result.Data == null)
        {
            egs = new List<EgDetailsResponse>();
            response = new PaginationResponse<EgDetailsResponse>
            {
                Items = new List<EgDetailsResponse>(),
                PageIndex = 1,
                PageSize = 1,
                TotalItem = 0
            };
            _loading = false;
            return;
        }

        response = result.Data;

        egs = response.Items.ToList();
        _loading = false;
    }

    private async Task PageChanged(int page)
    {
        request.PageIndex = page;
        await LoadData();
    }

    private async Task ReloadList()
    {
        request.PageIndex = 1;
        await LoadData();
    }

    private async Task PageSizeChanged()
    {
        Console.WriteLine($"Page size changed to: {request.PageSize}");
        request.PageIndex = 1;
        await LoadData();
    }
}