@page "/eg-page"
@using test2.Application.DTOs.Common
@using test2.Application.DTOs.Query
@using test2.Application.DTOs.Responses
@using test2.Presentation.Components.Buttons
@using test2.Application.Interfaces.Services

@inject IEgService _egService

<PageTitle>Example</PageTitle>

<MudText Typo="Typo.h3">Eg Entities</MudText>

<EgCreateButton OnCreated="ReloadList" />

<input type="text" @bind="request.Query" placeholder="Search..." class="form-control my-2" @oninput="SearchChanged" />
@if (egs.Count > 0)
{
    <MudTable Items="@egs" Loading="@_loading" Hover="true">
        <HeaderContent>
            <MudTh>No.</MudTh>
            <MudTh>Message</MudTh>
        </HeaderContent>
        <RowTemplate>
            @for (int i = 0; i < egs.Count; i++)
            {
                <MudTd>@((request.PageIndex - 1) * request.PageSize + i + 1)</MudTd>
                <MudTd>@egs[i].Message</MudTd>
            }
        </RowTemplate>
        @* <PagerContent>
            <MudPagination SelectedChanged="PageChanged" Count="@response.TotalPages" />
        </PagerContent> *@
    </MudTable>
}
else
{
    <MudText>No items found.</MudText>
}

@code {
    private bool _loading = false;
    private List<EgDetailsResponse> egs = new();
    private EgPaginationRequest request = new() { PageIndex = 1, PageSize = 10 };

    private PaginationResponse<EgDetailsResponse> response = new()
    {
        Items = new List<EgDetailsResponse>(),
        PageIndex = 1,
        PageSize = 1,
        TotalItem = 0
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        var result = await _egService.GetPagination(request);
        if (result == null || result.Data == null)
        {
            egs = new List<EgDetailsResponse>();
            response = new PaginationResponse<EgDetailsResponse>
            {
                Items = new List<EgDetailsResponse>(),
                PageIndex = 1,
                PageSize = 1,
                TotalItem = 0
            };
            _loading = false;
            return;
        }

        response = result.Data;

        egs = response.Items.ToList();
        _loading = false;
    }

    private async Task PageChanged(int page)
    {
        request.PageIndex = page;
        await LoadData();
    }

    private async Task SearchChanged(ChangeEventArgs e)
    {
        request.Query = e.Value?.ToString();
        request.PageIndex = 1;
        await LoadData();
    }

    private async Task ReloadList()
    {
        request.PageIndex = 1;
        await LoadData();
    }

    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        request.PageSize = int.Parse(e.Value?.ToString() ?? "10");
        request.PageIndex = 1;
        await LoadData();
    }
}